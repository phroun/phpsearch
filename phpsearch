#!/usr/bin/php
<?php

/*****************************************************************************\
  TODO:
 
  Context (lines before and after)
  
 
\*****************************************************************************/

$options = array();

function isANSI() {
  if (DIRECTORY_SEPARATOR === '\\') { // Not needed on *nix
    return getenv('ANSICON') !== false || getenv('ConEmuANSI') === 'ON';
  }
  return (function_exists('posix_isatty') && posix_isatty(STDOUT));
}

function ansiForm($raw, $attr) {
  global $options;
  
  $so = '';
  if ($options['color']) {
    $lastattr = 'zz';
    for ($i=0;$i<strlen($raw);$i++) {
      $tr = substr($attr, $i, 1);
      $tr = strtoupper($tr);
      if ($tr != $lastattr) {
        $lastattr = $tr;
        if ($tr == 'C') {
          $so .= "\033[0;1;44m";
        } elseif ($tr == 'O') {
          $so .= "\033[0;36m";
        } elseif ($tr == 'H') {
          $so .= "\033[0;1;41m";
        } elseif ($tr == 'S') {
          $so .= "\033[1;33m";
        } elseif ($tr == 'T') {
          $so .= "\033[1;31m";
        } elseif ($tr == '%') {
          $so .= "\033[0;36m";
        } elseif ($tr == 'P') {
          $so .= "\033[0;33m";
        } elseif ($tr == ' ') {
          $so .= "\033[0m";
        }
      }
      $so .= substr($raw, $i, 1);
    }
    $so .= "\033[0m";
   
  } else {
    $so = $raw;
  }
  
  
  return $so;
}

function phokenline($s, $blocktype = 'html') {

  // Look for //, <p, p>, /*, */, '', "", ``, \\.
  // Mark as  CC, HH, HH, CC, CC, SS, SS, TT.
  
  $operators = array('+', '-', '*', '/', '%', '.', '(', ')', '[', ']', '!', '=', ',', '?', ':', '>', '<', '&', '|', '^', '@');

  $linecomment = false;
  $singlequote = false;
  $doublequote = false;
  $backtick = false;
  $escape = false;
  $m = '';

  for ($i=0;$i<strlen($s);$i++) {

    if ($linecomment || ($blocktype == '/*') ) { // in a comment
      $m .= 'C';
      
      if ($blocktype == '/*') {
        if (substr($s, $i-1, 2) == '*/') {
          $blocktype = 'php';
          $m[$i-1] = 'c';
          $m[$i] = 'c';
        }
      }
    } elseif ($blocktype == 'html') {
      $m .= 'H';
      if (substr($s, $i-4, 5) == '<?php') {
        $blocktype = 'php';
        for($n=$i-4;$n<=$i;$n++) {
          $m[$n] = 'p';
        }
      }
    } else { // not in a comment
      if ($singlequote || $doublequote) { // in quote
        $m .= 'S';
        if ($singlequote && ($s[$i] == "'")) {
          $singlequote = false;
          $m[$i] = 's';
        } elseif ($doublequote && ($s[$i] == '"')) {
          $doublequote = false;
          $m[$i] = 's';
        }
        if ($escape) {
          $escape = false;
        } elseif ($s[$i] == '\\') {
          $escape = true;
        }
      } elseif ($backtick) { // in backtick
        $m .= 'T';
        if ((!$escape) && ($s[$i] == '`')) {
          $backtick = false;
          $m[$i] = 't';
        }
        if ($escape) {
          $escape = false;
        } elseif ($s[$i] == '\\') {
          $escape = true;
          $m[$i] = '%';          
        }
      } else { // in code
        if ($s[$i] == "'") {
          $m .= 's';
          $singlequote = true;
        } elseif ($s[$i] == '"') {
          $m .= 's';
          $doublequote = true;
        } elseif ($s[$i] == '`') {
          $m .= 't';
          $backtick = true;
        } elseif (substr($s, $i-1, 2) == '//') {
          $linecomment = true;
          $m[$i-1] = 'c';
          $m .= 'c';
        } elseif (substr($s, $i-1, 2) == '/*') {
          $blocktype = '/*';
          $m[$i-1] = 'c';
          $m .= 'c';
        } elseif (substr($s, $i-1, 2) == '?>') {
          $blocktype = 'html';
          $m[$i-1] = 'p';
          $m .= 'p';
        } elseif (in_array($s[$i], $operators)) {
          $m .= 'o';
        } else {
          $m .= ' ';
        }
      }
    }

  }
  
  return array($blocktype, $m);

}

function printUsage($offerhelp = true) {
  echo "\r\n";
  echo 'Usage: phpsearch -f [options] ... filespec' . "\r\n";
  echo '       phpsearch [options] term1,[term2,...] filespec' . "\r\n";
  if ($offerhelp) {
    echo 'Run phpsearch -? for help' . "\r\n";
  }
  echo "\r\n";
}

function printHelp() {
  printUsage(false);
  echo "terms\t\tA comma separated list of search terms. To perform a search and\r\n";
  echo "\t\treplace on any term, simply include its replacement in the term\r\n";
  echo "\t\tlist with \"=\", for example:  term1=newterm1,term2=newterm2\r\n";
  echo "\r\n";
  echo "The default behavior of phpsearch is to show lines from the specified file(s)\r\n";
  echo "containing any PHP identifiers, keywords, or numeric literals which exactly\r\n";
  echo "match the given search term(s).\r\n";
  echo "\r\n";
  echo "options may include:\r\n";
  echo "\r\n";
//  echo "-? --help\tPrint this help and exit.\r\n";
  echo "-e --each\tShow each result separately, even if in the same source line.\r\n";
  echo "-f --file\tOutput entire file instead of searching.\r\n";
//  echo "-l --lint\tPrint out the source files with color coding (if terminal is capable.)\r\n";
  echo "-R\t\tRecursively search any folder(s) specified.\r\n";
  echo "--pattern=*.php\tFilespec to include within folders found by -R.\r\n";
  echo "--replace\tWrite the search and replace results back to disk.\r\n";
  echo "-q --quiet\tSuppress non-matching output for brevity.\r\n";
  echo "\r\n";
  die();
}

function recursiveGlob($filespec) {
  global $options;
  
  if ($options['pattern'] == '') {
    $options['pattern'] = '*';
  }
  
  $res = array();
  if (''.@$filespec > '') {

    foreach (glob($filespec) as $fn) {

      if (is_dir($fn)) {
        $children = recursiveGlob($fn . '/*');
        foreach ($children as $pn) {
          $res[] = $pn;
        }
      }

    }

    foreach (glob($filespec . '/' . $options['pattern']) as $fn) {

      if (!is_dir($fn)) {
        $res[] = $fn;
      }

    }
  }
  return $res;
}

function phpsearch() {
  global $argv;
  global $argc;
  global $options;
  
  $matches = 0;
  $phind = array();

  $options = array();
  $options['color'] = isANSI();
  $options['file'] = false;
  $options['quiet'] = false;
//  $options['lint'] = false;
  $options['recursive'] = false;
  $options['replace'] = false;

  $i = 1;
  while (substr($argv[$i], 0, 1) == '-') {
    $sw = $argv[$i];
/*    echo 'Switch: ' . $sw;
    echo "\r\n";*/
    if (($sw == '-f') 
    || ($sw == '--file')
    || ($sw == '--full')
    ) {
      $options['file'] = true;
    }
    if (($sw == '-e')
    || ($sw == '--each')) {
      $options['each'] = true; // show each result on a separate line
    }
    if (($sw == '-q')
    || ($sw == '--quiet')) {
      $options['quiet'] = true;
    }
/*
    if (($sw == '-l')
    || ($sw == '--lint')) {
      $options['lint'] = true;
    }
*/
    if (($sw == '-R')
    || ($sw == '--recurse')
    || ($sw == '--recursive')) {
      $options['recursive'] = true;
    }
    
    if ($sw == '--pattern') {
      echo 'Switch --pattern requires a pattern, i.e., --pattern=*.php' . "\r\n";
      die();
    }

    if (substr($sw, 0, 10) == '--pattern=') {
      $options['pattern'] = substr($sw, 10);
      if ( (strpos($options['pattern'], '/') !== false)
      || (strpos($options['pattern'], '\\') !== false) ) {
        $options['pattern'] = '*';
        echo 'Pattern specified by --pattern must not include path separators.' . "\r\n";
        die();
      }
    }

    if ($sw == '--replace') {
      $options['replace'] = true;
    }
    if (($sw == '--help')
    || ($sw == '-?')
    || ($sw == '-h')
    ) {
      printHelp();
      die();
    }
    $i++;
  }
  
  if (!$options['file']) {

    if ($i > $argc-1) {
      printHelp();
      die();
    }

    $pattern = $argv[$i];
    foreach (explode(',', $pattern) as $k => $term) {
    
      $op = explode('=', $term);
      if ($op[1] == '') {
        $op[1] = $op[0];
      }
      $phind[':' . $op[0]] = $op[1]; // : forces index to be string
    }
    $i++;
  }
  
  if ($i > $argc-1) {
    printHelp();
    die();
  }
  
  // filespec:
  $blocktype = 'html';
  $result = array();
  $argx = $argv;
  $j = $i;  
  $files = array();
  while ($j <= count($argx) - 1) {
    if ($argx[$j] != '--') {
      if ($options['recursive']) {
        $subl = recursiveGlob($argx[$j]);
      } else {
        if (is_dir($argx[$j])) {
          echo $argx[$j] . ' is a directory.  Use -R if you want recursive search.' . "\r\n";
        } else {
          $subl = glob($argx[$j]);
        }
      }
      if (count($subl) == 0) {
        echo 'Filespec not found: ' . ($argx[$j]) . "\r\n";
      } else {
        foreach ($subl as $fn) {
          $files[] = $fn;
        }
      }
    }
    $j++;
  }
  

  foreach ($files as $filename) {
    $fmatch = 0;
    $c = explode("\n", file_get_contents($filename));
    $n = 1;
    $newfile = array();
    $rewrite = false;

    foreach ($c as $line) {
      $rawline = $line;
      $r = phokenline($rawline, $blocktype);
      $blocktype = $r[0];
      $mline = $r[1];

/*
      $line = ' ' . str_replace("\t", ' ', $line);
      $ol = '';
      while ($ol != $line) {
        $ol = $line;
        $line = str_replace(' (', '(', $line);
      }
*/

      $linematch = false;
      
      $pref = '';
      $colmatches = array();
      
      $arline = '';
      for($i=0;$i<strlen($rawline);$i++) {
        $arline .= ' ';
      }

      foreach ($phind as $orig => $new) {
        $orig = substr($orig, 1); // remove colon (force index to be string)
        $x = stripos($rawline, $orig);
        while ($x !== false) {
          if ($x == 0) {
            // begining of line exception
            $csamp = substr($rawline, $x, strlen($orig) + 1);
            $msamp = substr($mline, $x, strlen($orig) + 1);
            $x++;
          } else {
            $csamp = substr($rawline, $x-1, strlen($orig) + 2);
            $msamp = substr($mline, $x-1, strlen($orig) + 2);
            $ch = substr($csamp,0,1);
            if ((substr($msamp,0,1) != ' ')
            || !(
              (($ch >= '0') && ($ch <= '9'))
              ||
              (($ch >= 'a') && ($ch <= 'z'))
              ||
              (($ch >= 'A') && ($ch <= 'Z'))
              || ($ch == '_')
            )) {
              $x++;
              $csamp = substr($csamp, 1);
              $msamp = substr($msamp, 1);
            }
          }

          $ch = substr($csamp, strlen($csamp)-1, 1);
          if ((substr($msamp, strlen($msamp)-1, 1) != ' ')
          || !(
            (($ch >= '0') && ($ch <= '9'))
            ||
            (($ch >= 'a') && ($ch <= 'z'))
            ||
            (($ch >= 'A') && ($ch <= 'Z'))
            || ($ch == '_')
          )) {
            $csamp = substr($csamp, 0, strlen($csamp) - 1);
            $msamp = substr($msamp, 0, strlen($msamp) - 1);
          }
          
          if ((trim($msamp) == '') && (trim($csamp) == $orig)) {
            for ($j=0;$j<strlen($orig)-1;$j++) {
              $arline[$x+$j] = '^';
            }
            
            $colmatches[] = $x;

            $matches++;
            
            $ldif = strlen($new) - strlen($orig);

            $oraw = $rawline;
            $mraw = $mline;
            $mtail = substr($mline, $x-1+strlen($orig));
            $atail = substr($arline, $x-1+strlen($orig));
            $rtail = substr($rawline, $x-1+strlen($orig));
            $newspace = '';
            $newarline = '';
            for ($zi=0;$zi<strlen($new);$zi++) {
              $newspace .= ' ';
              $newarline .= '^';
            }

            $resarline = substr($arline, 0, $x-1) . $newarline . $atail;
            $resrawline = substr($rawline, 0, $x-1) . $new . $rtail;
            $resmline = substr($mline, 0, $x-1) . $newspace . $mtail;
//            $x += ldif;
//            $x++;
            
            if ($options['each']) {
              $pref = $filename . ':' . $n . ',';
              if ($x < 10) {
                $pref .= '0';
              }
              $pref .= $x . ': ';
              $space = '';
              while (strlen($space) < strlen($pref)) {
                $space .= ' ';
              }
              $linematch = true;
              $result[] = $pref . ansiForm($resrawline, $resmline)
              . "\r\n" . $space . $resarline;
            } else {
              $linematch = true;
              $rawline = $resrawline;
              $mline = $resmline;
              $arline = $resarline;
            }
            
          }

          $offset = $x+1+$ldif;

          if (($offset >= 0) && ($offset <= strlen($resrawline))) {
            $x = stripos($resrawline, $orig, $offset);
          } else {
            $x = false;
          }

          
        }
      }
      
      // end of line:
      if ($linematch && (!$options['each'])) {
        $pref = $filename . ':' . $n;
        $first = true;
        foreach ($colmatches as $x) {
          if ($first) {
            $pref .= ',';
            $first = false;
          } else {
            $pref .= '+';
          }
          if ($x < 10) {
            $pref .= '0';
          }
          $pref .= $x;
        }
        $pref .= ': ';
        $space = '';
        while (strlen($space) < strlen($pref)) {
          $space .= ' ';
        }
        $result[] = $pref . ansiForm($rawline, $mline)
        . "\r\n" . $space . $arline;
      }
      
      if ($options['file'] && (!$linematch)) {
        $result[] = ansiForm($rawline, $mline);
      }

      if ($options['replace']) {
        if ($linematch) {
          $newfile[] = $resrawline;
          if ($line != $resrawline) {
            $rewrite = true;
          }
        } else {
          $newfile[] = $line;
        }
      }

      $n++;
      // implement
    } // next line
    
    if ($rewrite && $options['replace']) {
      $snf = implode("\n", $newfile);
      echo "Writing changes to " . $filename . ".\r\n";
      file_put_contents($filename, $snf);
    }
    
    if ($fmatch == 0) {
      if (!($options['quiet']||$options['file'])) {
        echo '--- ' . $filename . ' did not match ---' . "\r\n";
      }
    }
  } // next file
  foreach ($result as $k => $v) {
    echo $v . "\r\n";
  }
  
  if ($matches == 0) {
    if (!$options['quiet']
    && (!$options['file'])) {
      echo 'Search term not found.';
      echo "\r\n";
    }
    die(1);
  } else {
    if ($matches == 1) {
      echo '1 match found.';
    } else {
      echo $matches . ' matches found.';
    }
  }
  echo "\r\n";
}

//print_r(recursiveGlob($argv[2]));

phpsearch();

